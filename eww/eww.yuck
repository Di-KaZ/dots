;    󰃠 󰃟 󰃞 󰃝  󰂜 󰂝 󰂞 󰂟 󰂠 󰅸 󰍳
(defpoll current-volume :interval "1s" "amixer -D pulse sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defpoll date	:interval "1s"	"date '+%R a %d %b'")
(deflisten wifi-status :initial '{}' "bun scripts/wifi.ts")
(deflisten brightness :initial '{}' "bun scripts/brightness.ts status")
(defvar bun_path "/home/getmoussed/.bun/bin/bun")


(defwidget notification_indicator []
  (eventbox
    :onclick "eww open notification_panel"
    (box
      :space-evenely false
      :class "status"
      :halign true
      :valign true
      (literal :class "icon" :valign "center" :halgin "center" "󰂜")
    )
   )
 )

(defwindow notification_panel 
  :monitor 0
  :geometry (geometry
    :x "45%"
    :y "0px"
    :width "390px"
    :height "200px"
    :anchor "top right"
  )
  :exclusive false
  :stacking "fg"
  (box :class "test" (literal "hey"))
)

(defwidget status []
  (eventbox
    ; :onhover "eww open control_center"
    ; :onhoverlost "eww close control_center"
    :timeout "1000ms"
    (box
      :class "status"
      :space-evenly false
      (box
        :class "chip"
        :valign "center"
        :orientation "h"
        :space-evenly false
        (literal :class "icon" :valign "center" "󰃟")
        (literal
          :valign "center"
        {brightness + "%"})
      )
      (box
        :class "chip"
        :valign "center"
        :orientation "h"
        :space-evenly false
        (literal :class "icon" :valign "center" "󰕾")
        (literal
          :valign "center"
        {current-volume + "%"})
      )
      (box
        :class "chip"
        :valign "center"
        :orientation "h"
        :space-evenly false
        (literal :class "icon"
          :valign "center"
          {EWW_BATTERY.BAT0.status == "Full" ? "󱟢" : EWW_BATTERY.BAT0.status == "Charging" ? "󱟦" : "󱟞"}
        )
        (literal
          :valign "center"
          {EWW_BATTERY.BAT0.capacity + "%"}
        )
      )
      (box
        :class "chip"
        :valign "center"
        :orientation "h"
        :tooltip {wifi-status?.ipv4}
        :space-evenly false
        (literal :class "icon" :valign "center" {wifi-status?.icon})
        (literal
          :valign "center"
        {wifi-status?.connection_name})
      )
    )
  )
)


(deflisten workspaces_status :initial "[]" "bun scripts/workspaces.ts status")
(defwidget workspaces []
  (box :class "status" :space-evenly true
    (for workspace in {workspaces_status.workspaces ?: []}
      (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
        (box :valign "center" :class "status__workspace ${workspace.id == workspaces_status.active_workspace_id ? "active" : ""}"
          (literal {workspace.id == workspaces_status.active_workspace_id ? "󰋘" : "󰋙"})
        )
      )
    )
  )
)

(defwidget launcher []
  (box
    :class "status"
    :space-evenly false
    (button :class "launcher" :onclick "anyrun &"
      :timeout 200
      "󰍳"
    )
    
  )
)

(defwidget clock []
  (box
    :class "status"
    :space-evenly false
    (box :class "time__icon" "󰥔")
    (box
      :valign "center"
      :space-evenly false
      :orientation "v"
      (literal :halign "start" date)
    )
  )
  
)

(deflisten player-status :initial '{ "status": "Stopped" }'	"bun scripts/player.ts status")
(defwidget player []
  (revealer
    :duration 300
    :reveal {player-status?.status != "Stopped"}
    :transition "slideleft"
    (box
      :class "status"
      :space-evenly false
      (image :class "image" :path {player-status.art} :image-width 40 :image-height 40) (box
        :valign "center"
        :space-evenly false
        ;; (revealer
        ;;   :duration 300
        ;;   :reveal {player-status.status == "Playing"}
        ;;   :transition "slideleft"
        ;;   (box
        ;;     :class "player__infos"
        ;;     :halign "start"
        ;;     :valign "center"
        ;;     :orientation "v"
        ;;     :space-evenly false
        ;;     (literal
        ;;       :halign "start"
        ;;       {player-status.title}
        ;;     )
        ;;     (literal
        ;;       :class "subtext"
        ;;       :halign "start"
        ;;       {player-status.artist}
        ;;     )
            ; (progress
              ;   :class "player__progress"
              ;   :value 30
            ; )
        ;;   )
        ;; )
        (box
          :space-evenly false
          (eventbox
            :onclick "bun scripts/player.ts prev"
            (literal
              :class "player__control"
              :valign "center"
              :halign "start"
              ""
            )
          )
          (eventbox
            :onclick "bun scripts/player.ts toggle"
            (literal
              :class "player__control"
              :valign "center"
              :halign "start"
              {player-status.status == "Playing" ? "" : ""}
              
            )
          )
          (eventbox
            :onclick "bun scripts/player.ts next"
            (literal
              :class "player__control"
              :valign "center"
              :halign "start"
              ""
            )
          )
        )
      )
    )
  )
)

(defwidget left []
  (box
    :halign "start"
    :space-evenly false
    ;; (launcher)
    (workspaces)
  )
)

(defwidget center []
  (box
    :halign "center"
    :space-evenly false
    ; (notification_indicator)
    (clock)
    (player)
  )
)


(defwidget right []
  (box
    :halign "end"
    :space-evenly false
    (status)
  )
)

(defwidget bar []
  (box
    :class "bar"
    :orientation "h"
    :vexpand "true"
    :hexpand "true"
    :valign "center"
    (left)
    (center)
    (right)
  )
)

(defwindow bar
  :monitor 0
  :geometry (geometry
    :x "0px"
    :y "10px"
    :width "99%"
    :height "20px"
    :anchor "bottom center"
  )
  :exclusive true
  :stacking "fg"
  :namespace "smoussy_bar"
  (bar)
)



(defwindow control_center
  :monitor 0
  :geometry (geometry
    :x "2.5%"
    :y "0px"
    :width "390px"
    :height "200px"
    :anchor "bottom right"
  )
  :exclusive false
  :stacking "fg"
  (box :class "test" (literal "hey"))
)
